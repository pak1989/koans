exit
tv.messages
exit
tv.messages
tv.number_of_times_called(:power)
exit
tv.messages.select {|msg| msg == :power }
tv.messages.count
tv.messages
@messages
@messsages
exit
tv.methods.to_s
tv.methods
tv
exit
proxy
tv
@messages
exit
ezit
exit
dice.roll(1)
dice = DiceSet.new
exit
dice.roll(1)
dice = DiceSet.new
dice.va
values
dice.values
dice.roll(1)
dice.roll(5)
dice = DiceSet.new
dice.roll(5)
exit
(1..6).include?(array.count)
(1..6).include?(array)
ruby --v
array.to_s.cover(1..6)
array.cover(1..6)
array.count == (1..6)
array.count == 6
array.count
array = [1,1,1,1,1,1]
array
array = [1,1,1,1,1,1].count = (1..6)
array = [1,1,1,1,1,1].count == 
array = [1,1,1,1,1,1].count == 6
array = [1,1,1,1,1,1].count == (1..6)
array = [1,1,1,1,1,1].count == range(1..6)
array = [1,1,1,1,1,1].count
dice.roll([1,4,5,6,7,8])
dice.roll([1])
exit
dice.roll([1])
dice.roll(1)
dice.roll()
dice.roll([1])
exit
dice.roll([1])
dice.roll(a)
dice.roll()
dice.roll(123)
dice.roll(123\)
dice.roll(5)
exit
score([1,1,1,5,5,5,2,2,2,1,1,1])
score([1,1,1,5,5,5,2,2,2])
score([1,1,1,5,5,5])
assert_equal 1300, score([1,1,1,5,5,5])
assert_equal 1300, score([1,1,1,1,1,1])
assert_equal 1200, score([1,1,1,1,1,1])
exit
n
exit
fives.count
fives  = array.select {|roll| roll == 7}
ones.count
ones
ones = array.select {|roll| roll == 1}
array = [1,1,11,5]
array.select! {|roll| roll == 1}
array = [1,1,11,5]
array
array.select! {|roll| roll == 1}
array = [1,5]
array
array.select! {|roll| roll == 1}
array.selectt! {|roll| roll == 1}
array.selectr! {|roll| roll == 1}
array.map! {|roll| roll == 1}
array.map {|roll| roll == 1}.count
array.map {|roll| roll = 1}.count
array.select {|roll| roll = 1}.count
array.select! {|roll| roll = 1}.count
array.select {|roll| roll = 1}.count
array = [1,5]
score([5])
dice
exit
score([5])
dice
exit
score([0])
score([5])
dice
exit
next
dice
exit
e
next
res
c
b
a
a,b,c = sides
sides
exit
ARGV
exit
ARGV
ARGS
exit
raise TriangleError, 'ciao'
raise TriangleError, 'ciao;
raise TriangleError
raise
TriangleError
TriangleError.class
TriangleError.message
TriangleError
exit
exception.is_a?(NoMethodError)
exception.class.is_a?(NoMethodError)
exception.class.is_a(NoMethodError)
exception.class
exception
exit
exception.messageexceptio
    assert_match /private method `my_private_method' called for #<AboutMethods:0x000055b1f84f6780>/, exception.message
exception.message
    assert_match /private method `my_private_method' called for #<AboutMethods:0x000055b1f84f6780>/, exception.message
exception.message
    assert_match /private method `my_private_method' called for #<AboutMethods:0x000055b1f84f6780>/, exception.message
exception.message
    assert_match /private method `my_private_method' called for #<AboutMethods:0x000055b1f84f6780>/, exception.message
exit
next
assert_match(/wrong number of arguments \(given 0, expected 2\)/, exception.message)
assert_match(/wrong number of arguments \(given 0, expected 2)\/, exception.message)
assert_match(/wrong number of arguments \(given 0, expected 2)/, exception.message)
assert_match(/wrong number of arguments (given 0, expected 2)/, exception.message)
exit
assert_match(/wrong number of arguments (given 0, expected 2)/, exception.message)
assert_match(\/wrong number of arguments (given 0, expected 2)\/, exception.message)
assert_match(/wrong number of arguments (given 0, expected 2)/, exception.message)
assert_match(//wrong number of arguments (given 0, expected 2)//, exception.message)
assert_match(/wrong number of arguments (given 0, expected 2)/, exception.message)
assert_match(/\"wrong number of arguments (given 0, expected 2)\"/, exception.message)
assert_match(/"wrong number of arguments (given 0, expected 2)"/, exception.message)
assert_match
assert_match('1','1')
assert_match(1,1)
assert_match(/"wrong number of arguments (given 0, expected 2)"/, exception.message)
assert_match("wrong number of arguments (given 0, expected 2)", exception.message)
exception
exception.message
exeptionassert_match("wrong number of arguments (given 0, expected 2)", exception.message)
